
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftCOMP_OPleftADD_OPleftMUL_OPADD_OP ARRAY ARRAYROW BULLETEDLIST COMP_OP FOR FROM IDENTIFIER IF MUL_OP NUMBER STRING TO WHILE programme : statement programme : statement ';' programme  statement : assignation \n        | structure \n        | function  structure : WHILE expression '{' programme '}'  structure : FOR IDENTIFIER FROM NUMBER TO NUMBER '{' programme '}'  structure : IF expression '{' programme '}'  structure : BULLETEDLIST '{' programme '}'  structure : ARRAY '{' programme '}'  structure : ARRAYROW '{' programme '}'  expression : '(' expression ')'  expression : NUMBER \n        | STRING expression : IDENTIFIER expression : expression ADD_OP expression \n        | expression MUL_OP expression \n        | expression COMP_OP expression  assignation : IDENTIFIER '=' expression  parameter : expression \n        | expression ',' parameter  function : IDENTIFIER '(' parameter ')' "
    
_lr_action_items = {'IDENTIFIER':([0,7,8,9,13,14,15,17,23,24,25,30,31,32,33,36,41,57,],[6,20,21,20,6,20,20,20,6,6,6,6,20,20,20,6,20,6,]),'WHILE':([0,13,23,24,25,30,36,57,],[7,7,7,7,7,7,7,7,]),'FOR':([0,13,23,24,25,30,36,57,],[8,8,8,8,8,8,8,8,]),'IF':([0,13,23,24,25,30,36,57,],[9,9,9,9,9,9,9,9,]),'BULLETEDLIST':([0,13,23,24,25,30,36,57,],[10,10,10,10,10,10,10,10,]),'ARRAY':([0,13,23,24,25,30,36,57,],[11,11,11,11,11,11,11,11,]),'ARRAYROW':([0,13,23,24,25,30,36,57,],[12,12,12,12,12,12,12,12,]),'$end':([1,2,3,4,5,18,19,20,26,27,40,43,44,45,46,49,50,51,53,55,59,],[0,-1,-3,-4,-5,-13,-14,-15,-2,-19,-22,-16,-17,-18,-12,-9,-10,-11,-6,-8,-7,]),'}':([2,3,4,5,18,19,20,26,27,37,38,39,40,42,43,44,45,46,48,49,50,51,53,55,58,59,],[-1,-3,-4,-5,-13,-14,-15,-2,-19,49,50,51,-22,53,-16,-17,-18,-12,55,-9,-10,-11,-6,-8,59,-7,]),';':([2,3,4,5,18,19,20,27,40,43,44,45,46,49,50,51,53,55,59,],[13,-3,-4,-5,-13,-14,-15,-19,-22,-16,-17,-18,-12,-9,-10,-11,-6,-8,-7,]),'=':([6,],[14,]),'(':([6,7,9,14,15,17,31,32,33,41,],[15,17,17,17,17,17,17,17,17,17,]),'NUMBER':([7,9,14,15,17,31,32,33,35,41,54,],[18,18,18,18,18,18,18,18,47,18,56,]),'STRING':([7,9,14,15,17,31,32,33,41,],[19,19,19,19,19,19,19,19,19,]),'{':([10,11,12,16,18,19,20,22,43,44,45,46,56,],[23,24,25,30,-13,-14,-15,36,-16,-17,-18,-12,57,]),'ADD_OP':([16,18,19,20,22,27,29,34,43,44,45,46,],[31,-13,-14,-15,31,31,31,31,-16,-17,31,-12,]),'MUL_OP':([16,18,19,20,22,27,29,34,43,44,45,46,],[32,-13,-14,-15,32,32,32,32,32,-17,32,-12,]),'COMP_OP':([16,18,19,20,22,27,29,34,43,44,45,46,],[33,-13,-14,-15,33,33,33,33,-16,-17,-18,-12,]),',':([18,19,20,29,43,44,45,46,],[-13,-14,-15,41,-16,-17,-18,-12,]),')':([18,19,20,28,29,34,43,44,45,46,52,],[-13,-14,-15,40,-20,46,-16,-17,-18,-12,-21,]),'FROM':([21,],[35,]),'TO':([47,],[54,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programme':([0,13,23,24,25,30,36,57,],[1,26,37,38,39,42,48,58,]),'statement':([0,13,23,24,25,30,36,57,],[2,2,2,2,2,2,2,2,]),'assignation':([0,13,23,24,25,30,36,57,],[3,3,3,3,3,3,3,3,]),'structure':([0,13,23,24,25,30,36,57,],[4,4,4,4,4,4,4,4,]),'function':([0,13,23,24,25,30,36,57,],[5,5,5,5,5,5,5,5,]),'expression':([7,9,14,15,17,31,32,33,41,],[16,22,27,29,34,43,44,45,29,]),'parameter':([15,41,],[28,52,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> statement','programme',1,'p_programme_statement','parser_sml.py',13),
  ('programme -> statement ; programme','programme',3,'p_programme_recursive','parser_sml.py',17),
  ('statement -> assignation','statement',1,'p_statement','parser_sml.py',21),
  ('statement -> structure','statement',1,'p_statement','parser_sml.py',22),
  ('statement -> function','statement',1,'p_statement','parser_sml.py',23),
  ('structure -> WHILE expression { programme }','structure',5,'p_structure_while','parser_sml.py',27),
  ('structure -> FOR IDENTIFIER FROM NUMBER TO NUMBER { programme }','structure',9,'p_structure_for','parser_sml.py',31),
  ('structure -> IF expression { programme }','structure',5,'p_structure_if','parser_sml.py',48),
  ('structure -> BULLETEDLIST { programme }','structure',4,'p_structure_bulleted_list','parser_sml.py',52),
  ('structure -> ARRAY { programme }','structure',4,'p_structure_array','parser_sml.py',56),
  ('structure -> ARRAYROW { programme }','structure',4,'p_structure_array_row','parser_sml.py',60),
  ('expression -> ( expression )','expression',3,'p_expression_paren','parser_sml.py',64),
  ('expression -> NUMBER','expression',1,'p_expression','parser_sml.py',68),
  ('expression -> STRING','expression',1,'p_expression','parser_sml.py',69),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','parser_sml.py',73),
  ('expression -> expression ADD_OP expression','expression',3,'p_expression_op','parser_sml.py',77),
  ('expression -> expression MUL_OP expression','expression',3,'p_expression_op','parser_sml.py',78),
  ('expression -> expression COMP_OP expression','expression',3,'p_expression_op','parser_sml.py',79),
  ('assignation -> IDENTIFIER = expression','assignation',3,'p_assign','parser_sml.py',83),
  ('parameter -> expression','parameter',1,'p_parameter','parser_sml.py',87),
  ('parameter -> expression , parameter','parameter',3,'p_parameter','parser_sml.py',88),
  ('function -> IDENTIFIER ( parameter )','function',4,'p_function','parser_sml.py',95),
]
